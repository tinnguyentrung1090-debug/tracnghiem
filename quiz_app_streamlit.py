import streamlit as st
import io
# C·∫ßn c√†i ƒë·∫∑t th∆∞ vi·ªán python-docx: pip install python-docx
try:
    from docx import Document
except ImportError:
    st.error("C·∫ßn c√†i ƒë·∫∑t th∆∞ vi·ªán 'python-docx' ƒë·ªÉ ƒë·ªçc file Word: pip install python-docx")
    Document = None # ƒê·∫∑t Document = None n·∫øu import th·∫•t b·∫°i
    
from google import genai
from google.genai.errors import APIError
import json

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App √în Luy·ªán ƒê·ªÅ Thi Tr·∫Øc Nghi·ªám",
    layout="wide"
)

st.title("üìö ·ª®ng d·ª•ng √în Luy·ªán Tr·∫Øc Nghi·ªám (Word File)")

# Kh√≥a API ƒë·ªÉ g·ªçi Gemini - L·∫•y t·ª´ Streamlit Secrets
API_KEY = st.secrets.get("GEMINI_API_KEY") 

# --- H√ÄM X·ª¨ L√ù DOCX V√Ä PARSING B·∫∞NG GEMINI ---

@st.cache_data(show_spinner=False)
def read_docx(uploaded_file):
    """ƒê·ªçc to√†n b·ªô vƒÉn b·∫£n t·ª´ file Word (.docx)."""
    if Document is None:
        st.error("Kh√¥ng th·ªÉ ƒë·ªçc file Word. Vui l√≤ng ki·ªÉm tra ƒë√£ c√†i ƒë·∫∑t 'python-docx' ch∆∞a.")
        return None
    try:
        # docx.Document() c√≥ th·ªÉ nh·∫≠n file object (uploaded_file)
        document = Document(uploaded_file)
        full_text = []
        for para in document.paragraphs:
            # Lo·∫°i b·ªè c√°c d√≤ng tr·ªëng
            if para.text.strip():
                 full_text.append(para.text)
        return "\n".join(full_text)
    except Exception as e:
        st.error(f"L·ªói ƒë·ªçc file Word: {e}")
        return None

@st.cache_data(show_spinner="ƒêang ph√¢n t√≠ch c·∫•u tr√∫c ƒë·ªÅ thi v·ªõi AI...")
def parse_quiz_data_with_gemini(raw_text, api_key):
    """
    S·ª≠ d·ª•ng Gemini API ƒë·ªÉ ph√¢n t√≠ch c√∫ ph√°p (parse) vƒÉn b·∫£n th√¥ th√†nh c·∫•u tr√∫c JSON.
    C·∫ßn ƒë·∫£m b·∫£o file Word c√≥ c·∫•u tr√∫c r√µ r√†ng (v√≠ d·ª•: C√¢u 1, A, B, C, D, ƒê√°p √°n ƒë√∫ng l√† X).
    """
    if not api_key:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets.")
        return None
    
    if not raw_text:
        return []

    system_instruction = (
        "B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch c√∫ ph√°p ƒë·ªÅ thi tr·∫Øc nghi·ªám. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ƒë·ªçc vƒÉn b·∫£n th√¥ "
        "t·ª´ file Word v√† tr√≠ch xu·∫•t t·∫•t c·∫£ c√°c c√¢u h·ªèi tr·∫Øc nghi·ªám th√†nh m·ªôt m·∫£ng JSON. "
        "M·ªói c√¢u h·ªèi ph·∫£i bao g·ªìm 'question', 'options' (m·ªôt m·∫£ng ch·ª©a t·∫•t c·∫£ c√°c l·ª±a ch·ªçn), "
        "v√† 'correct_answer' (ch·ªâ l√† ch·ªØ c√°i (A, B, C...) ho·∫∑c n·ªôi dung vƒÉn b·∫£n ƒë√°p √°n ƒë√∫ng)."
        "ƒê·∫£m b·∫£o k·∫øt qu·∫£ l√† JSON h·ª£p l·ªá v√† CH·ªà ch·ª©a JSON, kh√¥ng th√™m l·ªùi n√≥i ƒë·∫ßu hay gi·∫£i th√≠ch."
        "B·∫°n ph·∫£i lu√¥n lu√¥n tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON."
    )
    
    user_prompt = f"Tr√≠ch xu·∫•t t·∫•t c·∫£ c√¢u h·ªèi tr·∫Øc nghi·ªám t·ª´ vƒÉn b·∫£n sau:\n\n---\n{raw_text}\n---"
    
    try:
        client = genai.Client(api_key=api_key)
        
        # ƒê·ªãnh nghƒ©a Schema cho k·∫øt qu·∫£ JSON
        response_schema = {
            "type": "ARRAY",
            "items": {
                "type": "OBJECT",
                "properties": {
                    "question": {"type": "STRING", "description": "N·ªôi dung c√¢u h·ªèi."},
                    "options": {
                        "type": "ARRAY",
                        "items": {"type": "STRING"},
                        "description": "M·∫£ng ch·ª©a c√°c l·ª±a ch·ªçn ƒë√°p √°n (A, B, C...)."
                    },
                    "correct_answer": {"type": "STRING", "description": "Ch·ªØ c√°i (A, B, C...) ho·∫∑c n·ªôi dung c·ªßa ƒë√°p √°n ƒë√∫ng."}
                },
                "required": ["question", "options", "correct_answer"]
            }
        }
        
        config = {
            "response_mime_type": "application/json",
            "response_schema": response_schema
        }

        response = client.models.generate_content(
            model='gemini-2.5-flash-preview-05-20',
            contents=user_prompt,
            config=config,
            system_instruction=system_instruction
        )
        
        json_data = response.text
        return json.loads(json_data)
        
    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: {e}. Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng.")
        return None
    except json.JSONDecodeError:
        st.error("L·ªói ph√¢n t√≠ch c√∫ ph√°p JSON t·ª´ API. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u tr√∫c ƒë·ªÅ thi trong file Word.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh ph√¢n t√≠ch: {e}")
        return None

# --- KH·ªûI T·∫†O V√Ä QU·∫¢N L√ù SESSION STATE ---

def initialize_session_state():
    """Kh·ªüi t·∫°o c√°c bi·∫øn tr·∫°ng th√°i c·∫ßn thi·∫øt cho ·ª©ng d·ª•ng."""
    if 'quiz_data' not in st.session_state:
        st.session_state.quiz_data = [] # D·ªØ li·ªáu ƒë·ªÅ thi ƒë√£ parse
    if 'current_mode' not in st.session_state:
        st.session_state.current_mode = 'upload' # upload | menu | study | exam | review | result
    if 'current_index' not in st.session_state:
        st.session_state.current_index = 0
    if 'exam_answers' not in st.session_state:
        st.session_state.exam_answers = {} # {question_index: user_answer_text}
    if 'score' not in st.session_state:
        st.session_state.score = None # None | {'correct': 5, 'wrong': 3, 'review_q': [...]}

initialize_session_state()

# --- H√ÄM THI·∫æT L·∫¨P CH·∫æ ƒê·ªò ---

def set_mode(mode):
    """Thi·∫øt l·∫≠p ch·∫ø ƒë·ªô, reset tr·∫°ng th√°i n·∫øu c·∫ßn."""
    if mode == 'study' or mode == 'menu':
        st.session_state.current_index = 0
        st.session_state.current_mode = mode
        st.session_state.score = None
        # X√≥a tr·∫°ng th√°i ch·ªçn c·ªßa ch·∫ø ƒë·ªô study c≈©
        keys_to_delete = [k for k in st.session_state.keys() if k.startswith('study_selected_')]
        for k in keys_to_delete:
            del st.session_state[k]

    elif mode == 'exam':
        st.session_state.current_index = 0
        st.session_state.exam_answers = {}
        st.session_state.current_mode = 'exam'
        st.session_state.score = None
    elif mode == 'review':
        # Ch·∫ø ƒë·ªô √¥n l·∫°i c√¢u sai, s·ª≠ d·ª•ng danh s√°ch c√¢u sai t·ª´ k·∫øt qu·∫£
        if st.session_state.score and st.session_state.score.get('review_q'):
            st.session_state.current_index = 0
            st.session_state.current_mode = 'review'
        else:
            set_mode('result') # Quay l·∫°i m√†n h√¨nh k·∫øt qu·∫£

# --- H√ÄM TI·ªÜN √çCH CHO ƒê√ÅP √ÅN ---

def get_question_data(q_index, mode):
    """Tr·∫£ v·ªÅ d·ªØ li·ªáu c√¢u h·ªèi v√† ch·ªâ m·ª•c g·ªëc (n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô review)."""
    if mode == 'review':
        if not st.session_state.score or not st.session_state.score.get('review_q'):
             return None, None
        
        original_q_index = st.session_state.score['review_q'][q_index]
        question_data = st.session_state.quiz_data[original_q_index]
        return question_data, original_q_index
    else:
        question_data = st.session_state.quiz_data[q_index]
        return question_data, q_index

def get_correct_answer_text(question_data):
    """T√¨m ƒë√°p √°n ƒë√∫ng trong list options d·ª±a tr√™n correct_answer (ch·ªØ c√°i/text) v√† ƒë·ªãnh d·∫°ng."""
    correct_key = question_data['correct_answer'].strip()
    options = question_data['options']
    option_labels = ['A', 'B', 'C', 'D', 'E', 'F']
    
    # ∆Øu ti√™n t√¨m theo ch·ªØ c√°i
    if len(correct_key) == 1 and correct_key.upper() in option_labels:
        idx = option_labels.index(correct_key.upper())
        if idx < len(options):
            return f"{option_labels[idx]}. {options[idx]}"
    
    # Fallback: T√¨m theo n·ªôi dung vƒÉn b·∫£n
    for i, opt in enumerate(options):
        # So s√°nh n·ªôi dung vƒÉn b·∫£n
        if opt.strip() == correct_key.strip():
            return f"{option_labels[i]}. {opt}"
            
    # Fallback cu·ªëi c√πng: Tr·∫£ v·ªÅ vƒÉn b·∫£n g·ªëc c·ªßa ƒë√°p √°n ƒë√∫ng (c√≥ th·ªÉ l√† ch·ªØ c√°i ho·∫∑c n·ªôi dung)
    return correct_key

# --- H√ÄM RENDER C√ÇU H·ªéI CHUNG ---

def render_question(q_index, mode):
    """Hi·ªÉn th·ªã m·ªôt c√¢u h·ªèi d·ª±a tr√™n ch·ªâ m·ª•c v√† ch·∫ø ƒë·ªô."""
    
    question_data, original_q_index = get_question_data(q_index, mode)
    
    if question_data is None:
         st.error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c√¢u h·ªèi.")
         return
         
    # T√≠nh to√°n t·ªïng s·ªë c√¢u h·ªèi c·∫ßn hi·ªÉn th·ªã
    total_questions = len(st.session_state.quiz_data) if mode == 'exam' or mode == 'study' else len(st.session_state.score['review_q'])
    
    display_q_number = original_q_index + 1 if mode == 'review' else q_index + 1
    
    st.markdown(f"**C√¢u {display_q_number} / {total_questions}**")
    st.markdown(f"#### {question_data['question']}")

    # T·∫°o key duy nh·∫•t cho radio button
    radio_key = f"{mode}_q_{original_q_index}" if mode == 'review' else f"{mode}_q_{q_index}"
    
    # Chu·∫©n b·ªã options ƒë·ªÉ hi·ªÉn th·ªã (th√™m ch·ªØ c√°i A, B, C...)
    labeled_options = []
    option_labels = ['A', 'B', 'C', 'D', 'E', 'F']
    for i, opt in enumerate(question_data['options']):
        if i < len(option_labels):
            labeled_options.append(f"{option_labels[i]}. {opt}")
        else:
            labeled_options.append(opt)

    # --- CH·∫æ ƒê·ªò √îN LUY·ªÜN (STUDY / REVIEW) ---
    if mode == 'study' or mode == 'review':
        
        # Callback khi ch·ªçn ƒë√°p √°n
        def handle_study_selection(selected_text):
            # L∆∞u ƒë√°p √°n ƒë√£ ch·ªçn v√†o session state
            st.session_state[f"study_selected_{radio_key}"] = selected_text
            # Ghi nh·∫≠n k·∫øt qu·∫£
            st.session_state.is_answered = True

        # L·∫•y ƒë√°p √°n ƒë√£ ch·ªçn trong ch·∫ø ƒë·ªô h·ªçc t·∫≠p (d√πng key ri√™ng)
        study_selected = st.session_state.get(f"study_selected_{radio_key}")

        # Radio button
        selected_option_text = st.radio(
            "Ch·ªçn ƒë√°p √°n:",
            options=labeled_options,
            key=radio_key,
            on_change=handle_study_selection,
            args=(st.session_state[radio_key],)
        )
        
        # Sau khi ch·ªçn, hi·ªÉn th·ªã k·∫øt qu·∫£
        if study_selected:
            correct_answer_text = get_correct_answer_text(question_data)
            
            # Ki·ªÉm tra xem ƒë√°p √°n ch·ªçn c√≥ ch·ª©a vƒÉn b·∫£n c·ªßa ƒë√°p √°n ƒë√∫ng kh√¥ng
            is_correct = correct_answer_text in study_selected
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            if is_correct:
                st.success("‚úÖ Ch√≠nh x√°c! B·∫°n ƒë√£ ch·ªçn ƒë√∫ng.")
            else:
                st.error("‚ùå Sai r·ªìi.")
            
            # Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng
            st.info(f"ƒê√°p √°n ƒë√∫ng l√†: **{correct_answer_text}**")
            
            st.markdown("---")
            
            # N√∫t Next
            if q_index < total_questions - 1:
                if st.button("C√¢u ti·∫øp theo >>", key=f"next_study_{q_index}"):
                    st.session_state.current_index += 1
                    # X√≥a tr·∫°ng th√°i ch·ªçn c·ªßa c√¢u hi·ªán t·∫°i ƒë·ªÉ radio button reset
                    if f"study_selected_{radio_key}" in st.session_state:
                         del st.session_state[f"study_selected_{radio_key}"]
                    st.rerun()
            else:
                st.success(f"Ch√∫c m·ª´ng, b·∫°n ƒë√£ ho√†n th√†nh ph·∫ßn {'√¥n l·∫°i' if mode == 'review' else '√¥n luy·ªán'}!")
                if st.button("Quay l·∫°i Menu Ch√≠nh"):
                     set_mode('menu')
                     st.rerun()

    # --- CH·∫æ ƒê·ªò KI·ªÇM TRA (EXAM) ---
    elif mode == 'exam':
        
        # L·∫•y ƒë√°p √°n ƒë√£ ch·ªçn tr∆∞·ªõc ƒë√≥ (n·∫øu c√≥)
        initial_value = st.session_state.exam_answers.get(q_index)
        
        # T√¨m index c·ªßa ƒë√°p √°n ƒë√£ ch·ªçn (None n·∫øu ch∆∞a ch·ªçn)
        initial_index = labeled_options.index(initial_value) if initial_value in labeled_options else None
        
        def handle_exam_selection():
             # L∆∞u ƒë√°p √°n v√†o session state ngay khi ng∆∞·ªùi d√πng t∆∞∆°ng t√°c
             selected_text = st.session_state[radio_key]
             st.session_state.exam_answers[q_index] = selected_text

        st.radio(
            "Ch·ªçn ƒë√°p √°n:",
            options=labeled_options,
            key=radio_key,
            index=initial_index,
            on_change=handle_exam_selection
        )
        
        st.markdown("---")
        
        col_prev, col_next = st.columns([1, 1])
        
        with col_prev:
            if q_index > 0:
                if st.button("<< C√¢u tr∆∞·ªõc", key="prev_exam"):
                    st.session_state.current_index -= 1
                    st.rerun()
        
        with col_next:
            if q_index < total_questions - 1:
                if st.button("C√¢u ti·∫øp theo >>", key="next_exam"):
                    st.session_state.current_index += 1
                    st.rerun()
            elif q_index == total_questions - 1:
                # N√∫t n·ªôp b√†i ·ªü c√¢u cu·ªëi
                if st.button("N·ªòP B√ÄI KI·ªÇM TRA", use_container_width=True, type="primary"):
                    calculate_score()
                    st.rerun()

def calculate_score():
    """T√≠nh to√°n ƒëi·ªÉm s·ªë v√† l∆∞u v√†o session_state."""
    total = len(st.session_state.quiz_data)
    correct_count = 0
    wrong_count = 0
    review_q_indices = [] # Ch·ªâ m·ª•c c√°c c√¢u h·ªèi sai (trong m·∫£ng quiz_data)
    
    for i, question_data in enumerate(st.session_state.quiz_data):
        user_answer_text = st.session_state.exam_answers.get(i)
        
        # L·∫•y vƒÉn b·∫£n ƒë√°p √°n ƒë√∫ng ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng (VD: 'B. N·ªôi dung ƒë√°p √°n B')
        correct_answer_text = get_correct_answer_text(question_data)
        
        # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn v√† ƒë√°p √°n ƒë√∫ng c√≥ trong n·ªôi dung ƒë√°p √°n ch·ªçn
        is_correct = user_answer_text and correct_answer_text in user_answer_text
        
        if is_correct:
            correct_count += 1
        else:
            wrong_count += 1
            # Ch·ªâ th√™m v√†o danh s√°ch √¥n l·∫°i n·∫øu ƒë√£ c√≥ c√¢u tr·∫£ l·ªùi (ho·∫∑c ch∆∞a tr·∫£ l·ªùi, t√≠nh l√† sai)
            review_q_indices.append(i) 

    st.session_state.score = {
        'correct': correct_count,
        'wrong': wrong_count,
        'total': total,
        'review_q': review_q_indices
    }
    st.session_state.current_mode = 'result'

# --- H√ÄM RENDER C√ÅC M√ÄN H√åNH ---

def render_upload_screen():
    """M√†n h√¨nh t·∫£i file v√† menu ch√≠nh."""
    uploaded_file = st.file_uploader(
        "1. T·∫£i file Word (.docx) ch·ª©a ƒë·ªÅ thi tr·∫Øc nghi·ªám c·ªßa b·∫°n.",
        type=['docx']
    )
    
    if uploaded_file is not None and st.session_state.current_mode == 'upload':
        raw_text = read_docx(uploaded_file)
        if raw_text:
             if API_KEY:
                 parsed_data = parse_quiz_data_with_gemini(raw_text, API_KEY)
                 
                 if parsed_data and isinstance(parsed_data, list) and len(parsed_data) > 0:
                     st.session_state.quiz_data = parsed_data
                     st.success(f"Ph√¢n t√≠ch th√†nh c√¥ng! T√¨m th·∫•y {len(parsed_data)} c√¢u h·ªèi.")
                     set_mode('menu')
                     st.rerun()
                 elif parsed_data is not None:
                      st.error("Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o ho·∫∑c c·∫•u tr√∫c ƒë·ªÅ thi kh√¥ng r√µ r√†ng. Vui l√≤ng ki·ªÉm tra l·∫°i file Word.")
             else:
                 st.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y API Key. Vui l√≤ng th√™m 'GEMINI_API_KEY' v√†o Streamlit Secrets.")

    if st.session_state.current_mode == 'menu' and st.session_state.quiz_data:
        render_menu_screen()
        
def render_menu_screen():
    """M√†n h√¨nh ch·ªçn ch·∫ø ƒë·ªô √¥n luy·ªán/ki·ªÉm tra."""
    st.header("2. Ch·ªçn Ch·∫ø ƒë·ªô")
    st.subheader(f"ƒê√£ t·∫£i {len(st.session_state.quiz_data)} c√¢u h·ªèi.")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üìù √în Luy·ªán (Study Mode)")
        st.info("**T√≠nh nƒÉng:** Ch·ªçn ƒë√°p √°n v√† **hi·ªán ngay k·∫øt qu·∫£ ƒë√∫ng/sai**.")
        if st.button("B·∫ÆT ƒê·∫¶U √îN LUY·ªÜN", use_container_width=True, type="secondary"):
            set_mode('study')
            st.rerun()

    with col2:
        st.markdown("### ‚è±Ô∏è Ki·ªÉm Tra (Exam Mode)")
        st.info("**T√≠nh nƒÉng:** L√†m b√†i ·∫©n, **n·ªôp b√†i** ƒë·ªÉ xem k·∫øt qu·∫£ t·ªïng qu√°t.")
        if st.button("B·∫ÆT ƒê·∫¶U KI·ªÇM TRA", use_container_width=True, type="primary"):
            set_mode('exam')
            st.rerun()
            
def render_quiz_main():
    """Hi·ªÉn th·ªã giao di·ªán ch√≠nh cho Study, Exam, ho·∫∑c Review."""
    
    mode = st.session_state.current_mode
    
    # Hi·ªÉn th·ªã n√∫t quay l·∫°i Menu Ch√≠nh ·ªü tr√™n c√πng
    if st.button("<< Quay l·∫°i Menu Ch√≠nh", key="main_back_to_menu"):
        set_mode('menu')
        st.rerun()
        
    st.markdown("---")
        
    if mode == 'study':
        st.header("üìù CH·∫æ ƒê·ªò √îN LUY·ªÜN")
    elif mode == 'exam':
        st.header("‚è±Ô∏è CH·∫æ ƒê·ªò KI·ªÇM TRA")
    elif mode == 'review':
        st.header("üîÅ √îN L·∫†I C√ÇU SAI")
    
    data_to_display = st.session_state.quiz_data
    if mode == 'review':
         # ƒê·∫£m b·∫£o list review_q t·ªìn t·∫°i v√† kh√¥ng r·ªóng
         if not st.session_state.score or not st.session_state.score.get('review_q'):
              st.error("Kh√¥ng c√≥ c√¢u h·ªèi sai ƒë·ªÉ √¥n l·∫°i.")
              set_mode('result')
              st.rerun()
              return
         data_to_display = st.session_state.score['review_q'] # Ch·ªâ l√† index c·ªßa c√¢u h·ªèi sai
         
    data_len = len(data_to_display)

    if data_len > 0 and st.session_state.current_index < data_len:
        render_question(st.session_state.current_index, mode)
    elif data_len > 0:
        # Tr∆∞·ªùng h·ª£p ƒë√£ ho√†n th√†nh (Study/Review)
        st.success(f"B·∫°n ƒë√£ ho√†n th√†nh to√†n b·ªô ph·∫ßn {'√¥n l·∫°i' if mode == 'review' else '√¥n luy·ªán'}!")
        if mode == 'review' and st.button("Quay l·∫°i K·∫øt qu·∫£"):
             st.session_state.current_mode = 'result'
             st.rerun()

def render_result_screen():
    """M√†n h√¨nh k·∫øt qu·∫£ sau khi n·ªôp b√†i."""
    score = st.session_state.score
    if not score:
        st.warning("Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ hi·ªÉn th·ªã.")
        set_mode('menu')
        return

    st.header("üéâ K·∫æT QU·∫¢ KI·ªÇM TRA")
    st.markdown("---")
    
    # T√≠nh ƒëi·ªÉm v√† t·ª∑ l·ªá ph·∫ßn trƒÉm
    percent_correct = score['correct'] / score['total'] * 100
    
    if percent_correct >= 80:
         st.balloons()
         st.success(f"Tuy·ªát v·ªùi! B·∫°n ƒë·∫°t {percent_correct:.1f}% s·ªë c√¢u ƒë√∫ng.")
    elif percent_correct >= 50:
         st.info(f"K·∫øt qu·∫£ t·ªët! B·∫°n ƒë·∫°t {percent_correct:.1f}% s·ªë c√¢u ƒë√∫ng.")
    else:
         st.warning(f"C·∫ßn c·ªë g·∫Øng h∆°n! B·∫°n ƒë·∫°t {percent_correct:.1f}% s·ªë c√¢u ƒë√∫ng.")


    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("T·ªïng s·ªë c√¢u", score['total'])
    with col2:
        st.metric("S·ªë c√¢u ƒê√öNG", score['correct'])
    with col3:
        st.metric("S·ªë c√¢u SAI", score['wrong'])
        
    st.markdown("---")
    
    if score['wrong'] > 0:
        st.info(f"H√£y √¥n luy·ªán l·∫°i **{score['wrong']} c√¢u h·ªèi** sai ƒë·ªÉ c·ªßng c·ªë ki·∫øn th·ª©c.")
        if st.button("üîÅ √îN LUY·ªÜN L·∫†I C√ÇU SAI", type="primary", use_container_width=True):
            set_mode('review')
            st.rerun()
    else:
        st.success("B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng t·∫•t c·∫£ c√°c c√¢u h·ªèi!")
        
    if st.button("Quay l·∫°i Menu Ch√≠nh", key="back_to_menu_from_result"):
        set_mode('menu')
        st.rerun()

# --- MAIN RENDER LOGIC ---

# Sidebar Navigation/Status
st.sidebar.title("Tr·∫°ng th√°i v√† C·∫•u h√¨nh")
if st.session_state.quiz_data:
    st.sidebar.markdown(f"**T·ªïng c√¢u h·ªèi:** **{len(st.session_state.quiz_data)}**")
    st.sidebar.markdown(f"**Ch·∫ø ƒë·ªô hi·ªán t·∫°i:** {st.session_state.current_mode.capitalize()}")

    if st.session_state.current_mode not in ['menu', 'upload']:
        st.sidebar.markdown(f"**V·ªã tr√≠:** C√¢u **{st.session_state.current_index + 1}**")

# Hi·ªÉn th·ªã c√°c m√†n h√¨nh d·ª±a tr√™n mode
if st.session_state.current_mode == 'upload' or st.session_state.current_mode == 'menu':
    render_upload_screen()
elif st.session_state.current_mode == 'result':
    render_result_screen()
elif st.session_state.current_mode in ['study', 'exam', 'review']:
    render_quiz_main()

# L∆∞u √Ω quan tr·ªçng cho ng∆∞·ªùi d√πng v·ªÅ API Key v√† th∆∞ vi·ªán
st.sidebar.markdown("---")
st.sidebar.markdown("üí° **L∆∞u √Ω:**")
st.sidebar.markdown("- ·ª®ng d·ª•ng c·∫ßn th∆∞ vi·ªán `python-docx` (`pip install python-docx`).")
st.sidebar.markdown("- C·∫ßn c·∫•u h√¨nh Kh√≥a API **'GEMINI_API_KEY'** trong Streamlit Secrets ƒë·ªÉ ph√¢n t√≠ch file Word.")
if not API_KEY:
     st.sidebar.error("‚ö†Ô∏è THI·∫æU API KEY! Vui l√≤ng c·∫•u h√¨nh ngay.")
